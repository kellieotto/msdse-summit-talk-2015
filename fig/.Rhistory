estimate[rownum, "Unstratified"] <- compute_diffmeans(mm_unmatched, Y-Yhat)
estimate[rownum, "Unadjusted"] <- mean(Y[tr==1]) -  mean(Y[tr==0])
}
library(ModelMatch)
library(dplyr)
library(ggplot2)
library(reshape2)
library(MASS)
compute_diffmeans <- function(matches, Y){
sizes <- sapply(matches, nrow)
weighted.mean(
x = sapply(matches, function(x){
mean(Y[x$index[x$treatment==1]]) - mean(Y[x$index[x$treatment==0]])
}),
w = sizes/sum(sizes))
}
B <- 1000
N <- 100
# Generate Xs and epsilon
X1 <- rnorm(N); X2 <- rnorm(N)
epsilon <- rnorm(N)
Y <- 1 + X1 + X2 + epsilon
mm_model <- lm(Y~X1 + X2)
# Compare model-based matching, propensity score matching, t-test, and max entropy balancing
# estimate: mean(treated) - mean(control)
estimate <- matrix(NA, nrow = B, ncol = 4)
colnames(estimate) <- c("MM Pairs", "MM Strata", "Unstratified", "Unadjusted")
rownum <- 0
for(b in 1:B){
print(rownum)
rownum <- rownum + 1
# Generate Xs and epsilon
X1 <- rnorm(N); X2 <- rnorm(N)
epsilon <- rnorm(N)
# Treatment
tr <- rep(c(1, 0), times = c(30, 70))
#     }else{
#       if(selection == "correlated"){
#         # T = nu*X_1 + delta, so cov(T, X_1) = nu*var(X_1)
#         tr <- 1*((nu*X1 + rnorm(N)) >= 0)
#       }else{
#         if(selection == "misspecified pscore"){
#           # T = nu*X_1 + X_1*X_2 + delta, so cov(T, X_1) = nu*var(X_1) still
#           tr <- 1*((nu*X1 + X1*X2 + rnorm(N)) >= 0)
#         }else{
#           stop("Invalid selection input")
#         }
#       }
#     }
#
# Generate Y
Y <- 1 + X1 + X2 + 2*tr + epsilon
dat <- data.frame(Y, X1, X2, tr)
# Estimate Yhat using model off of controls in some other sample
#    mm_model <- lm(Y~X1+X2, dat, subset = (tr==0))
Yhat <- predict(mm_model, dat)
# Create matches/strata for estimation
mm_matches <- Matches(treatment = tr, prediction = Yhat)
mm_strata <- Strata(treatment = tr, prediction = Yhat, strata = 5)
mm_unmatched <- Strata(treatment = tr, prediction = Yhat, strata = 1)
# estimates
estimate[rownum, "MM Pairs"] <- compute_diffmeans(mm_matches, Y-Yhat)
estimate[rownum, "MM Strata"] <- compute_diffmeans(mm_strata, Y-Yhat)
estimate[rownum, "Unstratified"] <- compute_diffmeans(mm_unmatched, Y-Yhat)
estimate[rownum, "Unadjusted"] <- mean(Y[tr==1]) -  mean(Y[tr==0])
}
estimate
sapply(estimate, var)
apply(estimate, 2, var)
apply(estimate, 2, var, na.rm=T)
apply(estimate, 2, var, na.rm=T)
library(ModelMatch)
library(dplyr)
library(ggplot2)
library(reshape2)
library(MASS)
compute_diffmeans <- function(matches, Y){
sizes <- sapply(matches, nrow)
weighted.mean(
x = sapply(matches, function(x){
mean(Y[x$index[x$treatment==1]]) - mean(Y[x$index[x$treatment==0]])
}),
w = sizes/sum(sizes))
}
check_variances <- rep(10, {
B <- 100
N <- 100
# Generate Xs and epsilon
X1 <- rnorm(N); X2 <- rnorm(N)
epsilon <- rnorm(N)
Y <- 1 + X1 + X2 + epsilon
mm_model <- lm(Y~X1 + X2)
# Compare model-based matching, propensity score matching, t-test, and max entropy balancing
# estimate: mean(treated) - mean(control)
estimate <- matrix(NA, nrow = B, ncol = 4)
colnames(estimate) <- c("MM 2Strata", "MM Strata", "Unstratified", "Unadjusted")
rownum <- 0
for(b in 1:B){
print(rownum)
rownum <- rownum + 1
# Generate Xs and epsilon
X1 <- rnorm(N); X2 <- rnorm(N)
epsilon <- rnorm(N)
# Treatment
tr <- rep(c(1, 0), times = c(30, 70))
#     }else{
#       if(selection == "correlated"){
#         # T = nu*X_1 + delta, so cov(T, X_1) = nu*var(X_1)
#         tr <- 1*((nu*X1 + rnorm(N)) >= 0)
#       }else{
#         if(selection == "misspecified pscore"){
#           # T = nu*X_1 + X_1*X_2 + delta, so cov(T, X_1) = nu*var(X_1) still
#           tr <- 1*((nu*X1 + X1*X2 + rnorm(N)) >= 0)
#         }else{
#           stop("Invalid selection input")
#         }
#       }
#     }
#
# Generate Y
Y <- 1 + X1 + X2 + 2*tr + epsilon
dat <- data.frame(Y, X1, X2, tr)
# Estimate Yhat using model off of controls in some other sample
#    mm_model <- lm(Y~X1+X2, dat, subset = (tr==0))
Yhat <- predict(mm_model, dat)
# Create matches/strata for estimation
mm_matches <- Strata(treatment = tr, prediction = Yhat, strata = 2)
mm_strata <- Strata(treatment = tr, prediction = Yhat, strata = 5)
mm_unmatched <- Strata(treatment = tr, prediction = Yhat, strata = 1)
# estimates
estimate[rownum, "MM 2Strata"] <- compute_diffmeans(mm_matches, Y-Yhat)
estimate[rownum, "MM Strata"] <- compute_diffmeans(mm_strata, Y-Yhat)
estimate[rownum, "Unstratified"] <- compute_diffmeans(mm_unmatched, Y-Yhat)
estimate[rownum, "Unadjusted"] <- mean(Y[tr==1]) -  mean(Y[tr==0])
}
apply(estimate, 2, var, na.rm=T)
})
library(ModelMatch)
library(dplyr)
library(ggplot2)
library(reshape2)
library(MASS)
compute_diffmeans <- function(matches, Y){
sizes <- sapply(matches, nrow)
weighted.mean(
x = sapply(matches, function(x){
mean(Y[x$index[x$treatment==1]]) - mean(Y[x$index[x$treatment==0]])
}),
w = sizes/sum(sizes))
}
check_variances <- replicate(10, {
B <- 100
N <- 100
# Generate Xs and epsilon
X1 <- rnorm(N); X2 <- rnorm(N)
epsilon <- rnorm(N)
Y <- 1 + X1 + X2 + epsilon
mm_model <- lm(Y~X1 + X2)
# Compare model-based matching, propensity score matching, t-test, and max entropy balancing
# estimate: mean(treated) - mean(control)
estimate <- matrix(NA, nrow = B, ncol = 4)
colnames(estimate) <- c("MM 2Strata", "MM Strata", "Unstratified", "Unadjusted")
rownum <- 0
for(b in 1:B){
print(rownum)
rownum <- rownum + 1
# Generate Xs and epsilon
X1 <- rnorm(N); X2 <- rnorm(N)
epsilon <- rnorm(N)
# Treatment
tr <- rep(c(1, 0), times = c(30, 70))
#     }else{
#       if(selection == "correlated"){
#         # T = nu*X_1 + delta, so cov(T, X_1) = nu*var(X_1)
#         tr <- 1*((nu*X1 + rnorm(N)) >= 0)
#       }else{
#         if(selection == "misspecified pscore"){
#           # T = nu*X_1 + X_1*X_2 + delta, so cov(T, X_1) = nu*var(X_1) still
#           tr <- 1*((nu*X1 + X1*X2 + rnorm(N)) >= 0)
#         }else{
#           stop("Invalid selection input")
#         }
#       }
#     }
#
# Generate Y
Y <- 1 + X1 + X2 + 2*tr + epsilon
dat <- data.frame(Y, X1, X2, tr)
# Estimate Yhat using model off of controls in some other sample
#    mm_model <- lm(Y~X1+X2, dat, subset = (tr==0))
Yhat <- predict(mm_model, dat)
# Create matches/strata for estimation
mm_matches <- Strata(treatment = tr, prediction = Yhat, strata = 2)
mm_strata <- Strata(treatment = tr, prediction = Yhat, strata = 5)
mm_unmatched <- Strata(treatment = tr, prediction = Yhat, strata = 1)
# estimates
estimate[rownum, "MM 2Strata"] <- compute_diffmeans(mm_matches, Y-Yhat)
estimate[rownum, "MM Strata"] <- compute_diffmeans(mm_strata, Y-Yhat)
estimate[rownum, "Unstratified"] <- compute_diffmeans(mm_unmatched, Y-Yhat)
estimate[rownum, "Unadjusted"] <- mean(Y[tr==1]) -  mean(Y[tr==0])
}
apply(estimate, 2, var, na.rm=T)
})
check_variances
Yhat
var(Yhat)
var(Yhat[tr==1] - Yhat[tr==0])
var(Y)
var(Y)/(30*70)
var(Y[tr==1])
var(Y[tr==0])
var(Y[tr==0])/70 + var(Y[tr==1])/30
mean(Yhat^2)
1 - 4*30*70/(100*99)
.15*3.6
bound = function(ratio) {ratio/2 - 2}
plot(seq(0,5, by = 0.01), bound(seq(0, 5, by = 0.01)))
abline(h = c(-1, 1))
?heatmap
bound = function(nu, rho) nu/(2*(2-rho))
mat = sapply(seq(0,5,by=0.01), function(x) {sapply(seq(-1, 1, by = 0.01), function(y) bound(x, y))})
mat
dim(mat)
heatmap(mat)
2/(2*(2-seq(-1,1,by=0.01)))
1/(2*(2-seq(-1,1,by=0.01)))
5/(2*(2-seq(-1,1,by=0.01)))
library(dplyr)
library(ggplot2)
library(reshape2)
# Putting tables 4 and 7 into a figure
course <- c("Overall", "History", "Macroeconomics",
"Microeconomics", "Political Science",
"Sociology")
finalexam <- c(0.04, 0.16, 0.06, -0.01, -0.03, -0.02)
midterm   <- c(0.16, 0.32, 0.15, 0.13, 0.17, 0.24)
res <- data.frame(course, finalexam, midterm)
res
melt(res)
colnames(res) <- c("Course", "Final Exam", "Midterm Grades")
res2plot <- melt(res, id.vars="Course")
res2plot
colnames(res2plot)[2] <- "Grade"
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0.05, linetype = "dotted") +
geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("P-value") + ylab("") +
ggtitle("Balance Plot of All Covariates") +
theme_bw() +
scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20))
p
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0.05, linetype = "dotted") +
geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("P-value") + ylab("") +
ggtitle("Balance Plot of All Covariates") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20))
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20))
# Putting tables 4 and 7 into a figure
course <- c("All Courses", "History", "Macroeconomics",
"Microeconomics", "Political Science",
"Sociology")
finalexam <- c(0.04, 0.16, 0.06, -0.01, -0.03, -0.02)
midterm   <- c(0.16, 0.32, 0.15, 0.13, 0.17, 0.24)
res <- data.frame(course, finalexam, midterm)
colnames(res) <- c("Course", "Final Exam", "Midterm Grades")
res2plot <- melt(res, id.vars="Course")
colnames(res2plot)[2] <- "Grade"
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20))
p
res2plot$Course <- factor(res2plot$Course, levels = res2plot$Course[order(finalexam)])
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20))
p
# Putting tables 4 and 7 into a figure
course <- c("History", "Macroeconomics",
"Microeconomics", "Political Science",
"Sociology")
finalexam <- c(0.16, 0.06, -0.01, -0.03, -0.02)
midterm   <- c(0.32, 0.15, 0.13, 0.17, 0.24)
res <- data.frame(course, finalexam, midterm)
colnames(res) <- c("Course", "Final Exam", "Midterm Grades")
res2plot <- melt(res, id.vars="Course")
colnames(res2plot)[2] <- "Grade"
res2plot$Course <- factor(res2plot$Course, levels = res2plot$Course[order(finalexam)])
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20))
p
png("dotplot.png")
p
dev.off()
setwd("Documents/msdse-summit-talk-2015/fig")
png("dotplot.png", width = 800)
p
dev.off()
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip()
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=1))
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=-1))
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=0))
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=0))
png("dotplot.png", width = 800)
p
dev.off()
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=0))
png("dotplot.png", width = 800, height = 800)
p
dev.off()
png("dotplot.png", width = 600, height = 600)
p
dev.off()
ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=0)) +
theme(legend.position = "bottom")
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=0)) +
theme(legend.position = "bottom") +
theme(legend.title=element_blank())
png("dotplot.png", width = 600, height = 600)
p
dev.off()
png("dotplot.png", width = 500, height = 600)
p
dev.off()
res2plot$Grade <- factor(res2plot$Grade, levels = c("Midterm Grades", "Final Exam"))
p <- ggplot(res2plot, aes(x = value, y = Course)) +
geom_point(size = 5, aes_string(color="Grade", shape="Grade")) +
geom_vline(xintercept = 0, linetype = "dotted") +
#  geom_vline(xintercept = 0.1, linetype = "dotted") +
xlab("Correlation") + ylab("") +
ggtitle("Correlation between SET and Grades") +
theme_bw() +
#  scale_x_continuous(breaks = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 1)) +
theme(axis.text = element_text(size = 16)) +
theme(axis.title = element_text(size = 16)) +
theme(legend.text = element_text(size = 16)) +
theme(title = element_text(size=20)) +
coord_flip() +
theme(axis.text.x=element_text(angle=-45, hjust=0)) +
theme(legend.position = "bottom") +
theme(legend.title=element_blank())
p
png("dotplot.png", width = 500, height = 600)
p
dev.off()
